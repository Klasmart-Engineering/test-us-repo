directive @deprecated(
    reason: String = "No longer supported"
) on FIELD_DEFINITION
directive @isAdmin(entity: String) on FIELD_DEFINITION
directive @isAuthenticated on FIELD_DEFINITION

type UserConnection {
    total: Int
    edges: [User!]!
    pageInfo: PageInfo!
}

type OrganizationConnection {
    total: Int
    edges: [Organization]!
    pageInfo: PageInfo!
}

type RoleConnection {
    total: Int
    edges: [Role]!
    pageInfo: PageInfo!
}

type ClassConnection {
    total: Int
    edges: [Class]!
    pageInfo: PageInfo!
}

type PermissionConnection {
    total: Int
    edges: [Permission]!
    pageInfo: PageInfo!
}

type PageInfo {
    hasNextPage: Boolean!
    endCursor: String!
    startCursor: String!
    hasPreviousPage: Boolean!
}

type Query {
    me: User
    user(user_id: ID!): User
    users: [User]
    users_v1(
        after: String
        before: String
        first: Int
        last: Int
    ): UserConnection! @isAdmin(entity: "user")

    my_users: [User!]
    before: String

    organization(organization_id: ID!): Organization
    organizations(organization_ids: [ID!]): [Organization]
        @isAdmin(entity: "organization")
    organizations_v1(
        organization_ids: [ID!]
        after: String
        before: String
        first: Int
        last: Int
    ): OrganizationConnection! @isAdmin(entity: "organization")

    role(role_id: ID!): Role
    roles: [Role]
    permissions(
        after: String
        before: String
        first: Int
        last: Int
    ): PermissionConnection! @isAuthenticated
    classes: [Class]
    class(class_id: ID!): Class

    school(school_id: ID!): School
}

type Mutation {
    me: User
    user(
        user_id: ID!
        given_name: String
        family_name: String
        email: String
        phone: String
        avatar: String
        date_of_birth: String
        username: String
    ): User
    newUser(
        given_name: String
        family_name: String
        email: String
        phone: String
        avatar: String
        date_of_birth: String
        username: String
    ): User @deprecated(reason: "Use the inviteUser() method")
    switch_user(user_id: ID!): User

    organization(
        organization_id: ID!
        organization_name: String
        address1: String
        address2: String
        phone: String
        shortCode: String
    ): Organization

    create_default_roles(_: Int): [Role] @isAdmin
    create_system_permissions(_: Int): [Permission] @isAdmin
    role(role_id: ID!): Role
    roles: [Role]

    classes: [Class]
    class(class_id: ID!): Class

    school(school_id: ID!): School
}

type User {
    user_id: ID!

    #properties
    user_name: String @deprecated(reason: "Use `full_name`.")
    full_name: String
    given_name: String
    family_name: String
    email: String
    phone: String
    date_of_birth: String
    avatar: String
    username: String
    #connections
    """
    'my_organization' is the Organization that this user has created
    """
    my_organization: Organization
        @deprecated(reason: "Use `organization_ownerships`.")
    organization_ownerships: [OrganizationOwnership]
    memberships: [OrganizationMembership]
    membership(organization_id: ID!): OrganizationMembership

    school_memberships: [SchoolMembership]
    school_membership(school_id: ID!): SchoolMembership

    classesTeaching: [Class]
    classesStudying: [Class]

    #query
    organizationsWithPermission(
        permission_name: String!
    ): [OrganizationMembership]
    schoolsWithPermission(permission_name: String!): [SchoolMembership]

    #mutations
    set(
        given_name: String
        family_name: String
        email: String
        phone: String
        avatar: String
    ): User
    createOrganization(
        organization_name: String
        email: String # Not being used in resolver.
        address1: String
        address2: String
        phone: String
        shortCode: String
    ): Organization
    merge(other_id: String): User
    addOrganization(organization_id: ID!): OrganizationMembership
    addSchool(school_id: ID!): OrganizationMembership
}

type Organization {
    organization_id: ID!

    #properties
    organization_name: String
    address1: String
    address2: String
    phone: String
    shortCode: String
    status: String

    #connections

    """
    'owner' is the User that created this Organization
    """
    owner: User @deprecated(reason: "Use `organization_ownerships`.")
    primary_contact: User
    roles: [Role]
    memberships: [OrganizationMembership]
    teachers: [OrganizationMembership]
    students: [OrganizationMembership]
    schools: [School]
    classes: [Class]

    #query
    membersWithPermission(
        permission_name: String!
        search_query: String
    ): [OrganizationMembership]
    findMembers(search_query: String!): [OrganizationMembership]

    #mutations
    set(
        organization_name: String
        address1: String
        address2: String
        phone: String
        shortCode: String
    ): Organization
    setPrimaryContact(user_id: ID!): User
    addUser(user_id: ID!): OrganizationMembership
    inviteUser(
        email: String
        phone: String
        given_name: String
        family_name: String
        date_of_birth: String
        username: String
        organization_role_ids: [ID!]
        school_ids: [ID!]
        school_role_ids: [ID!]
    ): MembershipUpdate
    editMembership(
        email: String
        phone: String
        given_name: String
        family_name: String
        date_of_birth: String
        username: String
        organization_role_ids: [ID!]
        school_ids: [ID!]
        school_role_ids: [ID!]
    ): MembershipUpdate
    createRole(role_name: String!, role_description: String!): Role
    createSchool(school_name: String): School
    createClass(class_name: String): Class
    delete(_: Int): Boolean
}

type MembershipUpdate {
    user: User
    membership: OrganizationMembership
    schoolMemberships: [SchoolMembership]
}

scalar Date
type OrganizationMembership {
    #properties
    user_id: ID!
    organization_id: ID!
    join_timestamp: Date
    status: String

    #connections
    organization: Organization
    user: User
    roles: [Role]
    classes: [Class]
    schoolMemberships(permission_name: String): [SchoolMembership]

    #query
    checkAllowed(permission_name: ID!): Boolean
    classesTeaching: [Class]

    #mutations
    addRole(role_id: ID!): Role
    addRoles(role_ids: [ID!]!): [Role]
    removeRole(role_id: ID!): OrganizationMembership
    leave(_: Int): Boolean
}

type OrganizationOwnership {
    #properties
    user_id: ID!
    organization_id: ID!
    status: String

    #connections
    organization: Organization
    user: User
}

type Role {
    role_id: ID!

    #properties
    role_name: String
    role_description: String!
    status: String!
    system_role: Boolean!

    #connections
    organization: Organization
    memberships: [OrganizationMembership]
    permissions: [Permission]
    permission(permission_name: String!): Permission

    #mutations
    set(role_name: String, role_description: String, system_role: Boolean): Role
    grant(permission_name: String!): Permission
    revoke(permission_name: String!): Boolean
    edit_permissions(permission_names: [String!]): [Permission]
    deny(permission_name: String!): Permission @isAdmin

    delete_role(_: Int): Boolean
}

type Permission {
    permission_id: ID
    permission_name: ID!
    permission_category: String
    permission_group: String
    permission_level: String
    permission_description: String
    allow: Boolean
}

type School {
    school_id: ID!

    #properties
    school_name: String
    status: String

    #connections
    organization: Organization
    memberships: [SchoolMembership]
    membership(user_id: ID!): SchoolMembership
    classes: [Class]

    #mutations
    set(school_name: String): School
    addUser(user_id: ID!): SchoolMembership
    delete(_: Int): Boolean
}

type SchoolMembership {
    #properties
    user_id: ID!
    school_id: ID!
    join_timestamp: Date
    status: String

    #connections
    user: User
    school: School
    roles: [Role]

    #query
    checkAllowed(permission_name: ID!): Boolean

    #mutations
    addRole(role_id: ID!): Role
    addRoles(role_ids: [ID!]!): [Role]
    removeRole(role_id: ID!): SchoolMembership
    leave(_: Int): Boolean
}

type Class {
    class_id: ID!

    #properties
    class_name: String
    status: String

    #connections
    organization: Organization
    schools: [School]
    teachers: [User]
    students: [User]
    # schedule: [ScheduleEntry]

    # query
    eligibleTeachers: [User]
    eligibleStudents: [User]

    #mutations
    set(class_name: String): Class
    addTeacher(user_id: ID!): User
    editTeachers(teacher_ids: [ID!]): [User]
    removeTeacher(user_id: ID!): Boolean
    addStudent(user_id: ID!): User
    editStudents(student_ids: [ID!]): [User]
    removeStudent(user_id: ID!): Boolean
    editSchools(school_ids: [ID!]): [School]
    addSchool(school_id: ID!): School
    removeSchool(school_id: ID!): Boolean
    delete(_: Int): Boolean
    # addSchedule(id: ID!, timestamp: Date): Boolean
    # removeSchedule(id: ID!): Boolean
}

type ScheduleEntry {
    id: ID!
    timestamp: Date
}
