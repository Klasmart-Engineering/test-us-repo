type Query {
    defaultAvatars: [DefaultAvatar]

    user(user_id: ID!): User
    users: [User]

    shortCode(name: String!): String
    organization(organization_id: ID!): Organization
    organizations: [Organization]

    role(role_id: ID!): Role
    roles: [Role]

    classes: [Class]
    class(class_id: ID!): Class
}

type Mutation {
    user(
        user_id: ID!
        middle_name: String
        last_name: String
        suffix_name: String
        email: String
        is_child: Boolean
        avatar: Upload
        default_avatar: String
        birth_year_month: Date
    ): User
    newUser(
        first_name: String!
        middle_name: String
        last_name: String!
        suffix_name: String
        email: String!
        is_child: Boolean
        avatar: Upload 
        default_avatar: String 
        birth_year_month: Date!
    ): User

    organization(
        organization_id: ID!
        organization_name: String
        address1: String
        address2: String
        email: String
        phone: String
        shortCode: String
        logo: Upload
        color: String
    ): Organization
    newOrganization(
        organization_name: String!
        address1: String!
        address2: String
        email: String!
        phone: String!
        shortCode: String!
        logo: Upload!
        color: String!
    ): Organization

    role(role_id: ID!): Role
    roles: [Role]

    classes: [Class]
    class(class_id: ID!): Class
}

type ValidationError {
    property: String!,
    value: String, 
    constraint: [String!]!
}

type User {
    user_id: ID

    #properties
    first_name: String
    middle_name: String
    last_name: String
    suffix_name: String
    is_child: Boolean
    birth_year_month: Date
    email: String
    avatar: String 
    createdAt: Date
    updatedAt: Date

    errors: [ValidationError!]

    #connections
    memberships: [OrganizationMembership]
    membership(organization_id: ID!): OrganizationMembership
    classesTeaching: [Class]
    classesStudying: [Class]

    #query
    permission(permission_name: String!, organization_id: ID!, school_id: ID, object_id: ID): Boolean
    
    #mutations
    addOrganization(organization_id: ID!): OrganizationMembership
}

type Organization {
    organization_id: ID

    #properties
    organization_name: String
    address1: String
    address2: String
    email: String
    phone: String
    shortCode: String
    logo: String
    color: String
    primaryContact: String
    status: String
    createdAt: Date
    updatedAt: Date

    errors: [ValidationError!]

    #connections
    primary_contact: User
    roles: [Role]
    memberships: [OrganizationMembership]
    teachers: [OrganizationMembership]
    students: [OrganizationMembership]
    schools: [School]
    classes: [Class]


    #mutations
    setPrimaryContact(user_id: ID!): User
    addUser(user_id: ID!): OrganizationMembership
    createRole(role_name: String): Role
    createSchool(school_name: String): SchoolMembership
    createClass(class_name: String): Class
}

type DefaultAvatar {
    url: String
    key: String
}

scalar Date

type OrganizationMembership {
    #properties
    user_id: ID!
    organization_id: ID!
    join_timestamp: Date

    #connections
    organization: Organization
    user: User
    roles: [Role]
    classes: [Class]

    #query
    checkAllowed(permission_name: ID!): Boolean

    #mutations
    addRole(role_id: ID!): Role
    leave(_:Int): Boolean
}

type Role {
    role_id: ID!

    #properties
    role_name: String

    #connections
    organization: Organization
    memberships: [OrganizationMembership]
    permissions: [Permission]
    permission(permission_name: String!): Permission

    #mutations
    grant(permission_name: String!): Permission
    revoke(permission_name: String!): Boolean
    deny(permission_name: String!): Permission

    delete_role(_:Int): Boolean
}

type Permission {
    role_id: ID!
    permission_name: ID!
    allow: Boolean
    
    #connections
    role: Role
}

type School {
    school_id: ID!

    #properties
    school_name: String

    #connections
    organization: Organization
    memberships: [SchoolMembership]
    membership(user_id: ID!): SchoolMembership
    classes: [Class]

    #mutations
    addUser(id: ID!): SchoolMembership
}

type SchoolMembership {
    #properties
    user_id: ID!
    school_id: ID!
    join_timestamp: Date

    #connections
    user: User
    school: School
    roles: [Role]

    #query
    checkAllowed(permission_name: ID!): Boolean

    #mutations
    addRole(role_id: ID!): Role
    leave(_:Int): Boolean
}

type Class {
    class_id: ID!

    #properties
    class_name: String

    #connections
    organization: Organization
    teachers: [User]
    students: [User]
    # schedule: [ScheduleEntry]

    #mutations
    addTeacher(user_id: ID!): User
    addStudent(user_id: ID!): User
    addSchool(school_id: ID!): School
    delete(_:Int): Boolean
    # addSchedule(id: ID!, timestamp: Date): Boolean
    # removeSchedule(id: ID!): Boolean
}

type ScheduleEntry {
    id: ID!
    timestamp: Date
}
