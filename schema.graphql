type Query {
    me: User
    user(user_id: ID!): User
    users: [User]

    defaultAvatars: [DefaultAvatar]
    shortCode(name: String!): String

    organization(organization_id: ID!): Organization
    organizations(organization_ids: [ID!]): [Organization]

    role(role_id: ID!): Role
    roles: [Role]

    classes: [Class]
    class(class_id: ID!): Class

    school(school_id: ID!): School
}

type Mutation {
    me: User
    user(
        user_id: ID!
        given_name: String
        family_name: String
        suffix_name: String
        email: String
        avatar: Upload
        default_avatar: String
        birth_year_month: Date

        organization_name: String
        address1: String
        address2: String
        email: String
        phone: String
        shortCode: String
        logo: Upload
        color: String
    ): User
    newUser(
        given_name: String
        family_name: String
        suffix_name: String
        email: String
        avatar: Upload 
        default_avatar: String 
        birth_year_month: Date
    ): User

    organization(
        organization_id: ID!
        organization_name: String
        address1: String
        address2: String
        email: String
        phone: String
        shortCode: String
        logo: Upload
        color: String
    ): Organization

    role(role_id: ID!): Role
    roles: [Role]

    classes: [Class]
    class(class_id: ID!): Class

    school(school_id: ID!): School
}

type User {
    user_id: ID

    #properties
    user_name: String
    given_name: String
    family_name: String
    suffix_name: String
    birth_year_month: Date
    email: String
    avatar: String
    createdAt: Date
    updatedAt: Date

    errors: [ValidationError!]

    #connections
    """
    'my_organization' is the Organization that this user has created
    """
    my_organization: Organization
    memberships: [OrganizationMembership]
    membership(organization_id: ID!): OrganizationMembership

    school_memberships: [SchoolMembership]
    school_membership(school_id: ID!): SchoolMembership

    classesTeaching: [Class]
    classesStudying: [Class]

    #query
    organizationsWithPermission(permission_name: String!): [OrganizationMembership]
    schoolsWithPermission(permission_name: String!): [SchoolMembership]

    #mutations
    set(
        given_name: String
        family_name: String
        suffix_name: String
        email: String
        avatar: Upload
        default_avatar: String
        birth_year_month: Date
    ): User
    createOrganization(
        organization_name: String
        address1: String
        address2: String
        email: String
        phone: String
        shortCode: String
        logo: Upload
        color: String
    ): Organization
    addOrganization(organization_id: ID!): OrganizationMembership
    addSchool(school_id: ID!): OrganizationMembership
}

type Organization {
    organization_id: ID

    #properties
    organization_name: String
    address1: String
    address2: String
    email: String
    phone: String
    shortCode: String
    logo: String
    color: String
    createdAt: Date
    updatedAt: Date

    errors: [ValidationError!]

    #connections

    """
    'owner' is the User that created this Organization
    """
    owner: User
    primary_contact: User
    roles: [Role]
    memberships: [OrganizationMembership]
    teachers: [OrganizationMembership]
    students: [OrganizationMembership]
    schools: [School]
    classes: [Class]

    #query
    membersWithPermission(permission_name: String!, search_query: String): [OrganizationMembership]
    findMembers(search_query: String!): [OrganizationMembership]

    #mutations
    set(
        organization_name: String
        address1: String
        address2: String
        email: String
        phone: String
        shortCode: String
        logo: Upload
        color: String
    ): Organization
    setPrimaryContact(user_id: ID!): User
    addUser(user_id: ID!): OrganizationMembership
    inviteUser(email: String!, given_name: String, family_name: String, organization_role_ids: [ID!], school_ids: [ID!], school_role_ids: [ID!]): MembershipUpdate
    editMembership(email: String!, given_name: String, family_name: String, organization_role_ids: [ID!], school_ids: [ID!], school_role_ids: [ID!]): MembershipUpdate
    createRole(role_name: String): Role
    createDefaultRoles(_: Int): [Role]
    resetDefaultRolesPermissions(_: Int): [Role]
    createSchool(
        school_name: String
        address: String
        phone: String
        email: String
        startDate: Date
        endDate: Date
        grades: [String]
        color: String
        logo: Upload
    ): School
    createClass(
        class_name: String
        grades: [String]
        startDate: Date
        endDate: Date
        color: String
    ): Class
}

type DefaultAvatar {
    url: String
    key: String
}

type ValidationError {
    property: String!,
    value: String, 
    constraint: [String]
}

type MembershipUpdate {
    user: User
    membership: OrganizationMembership
    schoolMemberships: [SchoolMembership]
}

scalar Date
type OrganizationMembership {
    #properties
    user_id: ID!
    organization_id: ID!
    join_timestamp: Date

    #connections
    organization: Organization
    user: User
    roles: [Role]
    classes: [Class]
    schoolMemberships: [SchoolMembership]

    #query
    checkAllowed(permission_name: ID!): Boolean

    #mutations
    addRole(role_id: ID!): Role
    addRoles(role_ids: [ID!]!): [Role]
    removeRole(role_id: ID!): OrganizationMembership
    leave(_:Int): Boolean
}

type Role {
    role_id: ID!

    #properties
    role_name: String

    #connections
    organization: Organization
    memberships: [OrganizationMembership]
    permissions: [Permission]
    permission(permission_name: String!): Permission

    #mutations
    set(role_name: String): Role
    grant(permission_name: String!): Permission
    revoke(permission_name: String!): Boolean
    deny(permission_name: String!): Permission

    delete_role(_:Int): Boolean
}

type Permission {
    role_id: ID!
    permission_name: ID!
    allow: Boolean

    #connections
    role: Role
}

type School {
    school_id: ID

    #properties
    school_name: String
    address: String
    phone: String
    email: String
    startDate: Date
    endDate: Date
    grades: [String]
    color: String
    logo: String

    errors: [ValidationError!]

    #connections
    organization: Organization
    memberships: [SchoolMembership]
    membership(user_id: ID!): SchoolMembership
    classes: [Class]

    #mutations
    set(
        school_name: String
        address: String
        phone: String
        email: String
        startDate: Date
        endDate: Date
        grades: [String]
        color: String
        logo: Upload
    ): School
    addUser(user_id: ID!): SchoolMembership
}

type SchoolMembership {
    #properties
    user_id: ID!
    school_id: ID!
    join_timestamp: Date

    #connections
    user: User
    school: School
    roles: [Role]

    #query
    checkAllowed(permission_name: ID!): Boolean

    #mutations
    addRole(role_id: ID!): Role
    addRoles(role_ids: [ID!]!): [Role]
    removeRole(role_id: ID!): SchoolMembership
    leave(_:Int): Boolean
}

type Class {
    class_id: ID

    #properties
    class_name: String
    grades: [String]
    startDate: Date
    endDate: Date
    color: String

    errors: [ValidationError!]

    #connections
    organization: Organization
    schools: [School]
    teachers: [User]
    students: [User]
    # schedule: [ScheduleEntry]

    # query
    eligibleTeachers: [User]
    eligibleStudents: [User]

    #mutations
    set(
        class_name: String
        grades: [String]
        startDate: Date
        endDate: Date
        color: String
    ): Class
    addTeacher(user_id: ID!): User
    removeTeacher(user_id: ID!): Boolean
    addStudent(user_id: ID!): User
    removeStudent(user_id: ID!): Boolean
    addSchool(school_id: ID!): School
    removeSchool(school_id: ID!): Boolean
    delete(_:Int): Boolean
    # addSchedule(id: ID!, timestamp: Date): Boolean
    # removeSchedule(id: ID!): Boolean
}

type ScheduleEntry {
    id: ID!
    timestamp: Date
}
